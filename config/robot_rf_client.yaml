# Packages must be generated first. To do so
# run the following from this files directory
# rosrun robofleet_client generate_plugin_pkg.py -o ./../.. -w $(cat rf_packages.txt)
params:
  host_url: "ws://192.168.11.11:8080"

  wait_for_pongs: true
  max_queue_before_waiting: 5

  # uncomment to run in Direct Mode
  #direct_mode_port: 8080
  #direct_mode_bytes_per_sec: 2048000

  # Verbosity 0 - MINIMAL
  # Verbosity 1 - CONFIG_ONLY
  # Verbosity 2 - ALL
  verbosity: 1

  # you may need more threads to handle a large amount of traffic
  spin_threads: 1

# Publish information to Robofleet Server
publishers: [ 
  { # Send to declare which modification modality to use (*USER STUDY - optional)
    client_topic: "/surface_repair/study_modality",
    rbf_topic: "/vaultbot/surface_repair/study_modality",
    type: "std_msgs/Header"
  },
  { # Send robot repair goal pose
    client_topic: "/surface_repair/goal_pose",
    rbf_topic: "/vaultbot/goal_pose",
    type: "geometry_msgs/PoseStamped"
  },
  { # Send robot repair plan (point cloud)
    client_topic: "/surface_repair/surface_points",
    rbf_topic: "/vaultbot/surface_repair/surface_points",
    type: "sensor_msgs/PointCloud2"
  },
  { # Send rust detections to hololens
    client_topic: "/surface_repair/augre/detection",
    rbf_topic: "/vaultbot/detection",
    type: "augre_msgs/DetectedItem"
  }
]

# Subscribe to information on Robofleet Server
subscribers: [ 
  
  { # Receive user feedback on repair plan
    client_topic: "/surface_repair/augre/hololens/user_feedback",
    rbf_topic: "/hololens/surface_repair/user_feedback",
    type: "std_msgs/UInt8"
  },
  { # Receive shape information for exclusion or inclusion volumes (shape mode)
    client_topic: "/surface_repair/augre/hololens/bounding_objects",
    rbf_topic: "/hololens/surface_repair/bounding_objects",
    type: "augre_msgs/BoundingObject3DArray"
  },
  
  ########################################################################
  # NOTE: Commented out for highlight and lasso server solver configuration
  # { # Receive centroids of spheres used for highlighting (highlight mode)
  #   client_topic: "/hololens/surface_repair/highlight/points",
  #   rbf_topic: "/hololens/surface_repair/highlight/points",
  #   type: "geometry_msgs/PolygonStamped"
  # },
  # { # Receive centroids of spheres used for lasso (lasso mode)
  #   client_topic: "/hololens/surface_repair/lasso/points",
  #   rbf_topic: "/hololens/surface_repair/lasso/points",
  #   type: "geometry_msgs/PolygonStamped"
  # },
  ########################################################################
  { # Receive an array of points (True/False) that are highlighted in point cloud (highlight mode)
    # 0 : points were not highlighted
    # 1 : points are in highlight
    # NOTE: configured for highlight and lasso server solver 
    client_topic: "/surface_repair/augre/hololens/highlighted_points",
    rbf_topic: "/server/surface_repair/highlight/pc_points_tagged",
    type: "std_msgs/UInt8MultiArray"
  },
  { # Receive an array of points that are inside the convex lasso in point cloud (lasso mode)
    # 0 : points were not highlighted
    # 1 : points are in highlight
    # NOTE: configured for highlight and lasso server solver 
    client_topic: "/surface_repair/augre/hololens/lasso_points",
    rbf_topic: "/server/surface_repair/lasso/pc_points_tagged",
    type: "std_msgs/UInt8MultiArray"
  },
  { # [OPTIONAL - USER STUDY] Receive upon hearing "end trial" keyword
    client_topic: "/hololens/surface_repair/end_trial",
    rbf_topic: "/hololens/surface_repair/end_trial",
    type: "augre_msgs/HeaderArrayStamped"
  },
  { # tf tree with all augre agents
    client_topic: "/tf",
    rbf_topic: "/augre/tf",
    type: "tf2_msgs/TFMessage"
  }
]
